#!/bin/sh
exec 2>&1
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_cpu () { 
	cpu="$( grep -o "^[^ ]*" /proc/loadavg )" 
}

update_memory () { 
	memory="$(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
}

update_time () { 
	time="$(date "+[%a %d %b] [%I:%M %P]")" 
}

update_weather () { 
	weather="$(curl -s "wttr.in?format=1"| sed -E "s/^(.).*\+/\1/")" 
}

update_bat () { 
	read -r bat_status </sys/class/power_supply/BAT1/status
	read -r bat_capacity </sys/class/power_supply/BAT1/capacity
	bat="$bat_status $bat_capacity%"
}

# modules that don't update on their own
# they are also run at the start for getting the initial value
update_vol () { 
	vol="$([ "$(pamixer --get-mute)" = "false" ] && printf 'ðŸ”Š' || printf 'ðŸ”‡')$(pamixer --get-volume)%"
}
update_vol

update_backlight () { 
	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight="â˜€$((actual_brightness*100/max_brightness))%"
}
update_backlight

display () { 
	#printf "%s\n" "$event [$weather] [$memory $cpu] [$bat] [$backlight] [$mic$vol] $time "
	xsetroot -name " [$weather] [$memory $cpu] [$bat] [$backlight] [$vol] $time "
}


# Signals for each module to update. RTMIN is 34
## trap "<function to update>;display" "RTMIN+n"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n
trap "update_vol;display" "RTMIN"
trap "update_backlight;display" "RTMIN+1"
trap "update_bat;display" "RTMIN+2"

while true
do
	sleep 1 & wait && { 
		# update interval of module in seconds
		## [ $((sec % n)) -eq m ] && udpate_item
		# to update item ever n seconds with a offset of m
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 15)) -eq 0 ] && update_cpu 	# update cpu every 15 seconds
		[ $((sec % 15)) -eq 0 ] && update_memory
		[ $((sec % 60 )) -eq 0 ] && update_bat
		# update offset so that all of them don't update on the same second
		[ $((sec % 3600 )) -eq 2 ] && update_weather # updates weather every hour with a 2 second offset

		# how often the display updates ( 5 secconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done 


