#!/bin/bash

printf "$$" > ~/.cache/pidofbar

sec=0
cpu_num=$(nproc --all)

update_cpu_load () {
    load=$(grep -o "^[^ ]*" /proc/loadavg )

    idle="#6495ed^▁ $load"
    low="#00FF00^▃ $load"
    mid="#FFA500^▅ $load"
    high="#8A2BE2^█ $load"
    stress="#FF0000^ $load"

    cur_load=$(echo $(echo "scale=2; $(grep -o "^[^ ]*" /proc/loadavg) / $cpu_num" | bc))

    if [ $(echo "$cur_load < 0.1" | bc -l) -eq 1 ]; then
        cpu_load="$idle"
    elif [ $(echo "$cur_load < 0.3" | bc -l) -eq 1 ]; then
        cpu_load="$low"
    elif [ $(echo "$cur_load < 0.5" | bc -l) -eq 1 ]; then
        cpu_load="$mid"
    elif [ $(echo "$cur_load < 0.7" | bc -l) -eq 1 ]; then
        cpu_load="$high"
    else
        cpu_load="$stress"
    fi

    cpu_load="󰍛 ^c$cpu_load^d^"
}

update_memory () {
    icon=" "

    percent_used=$(free -m | sed -n '2p' | awk '{printf "%.1f", ($3/$2)*100}' | sed "s/,/./")
    free=$(free -h | sed -n '2p' | awk '{print $4 }')

    color="^c"

    if [ $(echo "if (${percent_used} < 10.0) 1 else 0" | bc -l) -eq 1 ]; then
        color="${color}#00ffbb"
    elif [ $(echo "if (${percent_used} < 20.0) 1 else 0" | bc -l) -eq 1 ]; then
        color="${color}#00ff00"
    elif [ $(echo "if (${percent_used} < 50.0) 1 else 0" | bc -l) -eq 1 ]; then
        color="${color}#ffff00"
    elif [ $(echo "if (${percent_used} < 75.0) 1 else 0" | bc -l) -eq 1 ]; then
        color="${color}#f7931a"
    else
        color="${color}#ff0000"
    fi

    memory="$icon $color^$free($percent_used%)^d^"
}

update_time () {
    time="$(date '+%d.%m.%Y %H:%M:%S')"
}

update_wifi () {
    signal=$(cat /proc/net/wireless | awk '{ if ($3 ~ /[0-9]+/) print ($3*10)/7}' | sed "s/,/./" | LC_ALL=C numfmt --format=%.0f)

    max="󰤨  ^c#00ff00^$signal%^d^"
    high="󰤥  ^c#00ff00^$signal%^d^"
    mid="󰤢  ^c#f7ff00^$signal%^d^"
    low="󰤟  ^c#ffa500^$signal%^d^"
    off="^c#ff0000^󰤯  $signal%^d^"

    if [ $(echo "$signal > 90.0" | bc -l) -eq 1 ]; then
        wifi_signal="$max"
    elif [ $(echo "$signal > 60.0" | bc -l) -eq 1 ]; then
        wifi_signal="$high"
    elif [ $(echo "$signal > 30.0" | bc -l) -eq 1 ]; then
        wifi_signal="$mid"
    elif [ $(echo "$signal > 5.0" | bc -l) -eq 1 ]; then
        wifi_signal="$low"
    else
        wifi_signal="$off"
    fi
}

update_bat () {
    bat_discharging_9="󰂎 "
    bat_discharging_18="󰁺 "
    bat_discharging_27="󰁻 "
    bat_discharging_36="󰁼 "
    bat_discharging_45="󰁽 "
    bat_discharging_54="󰁾 "
    bat_discharging_63="󰁿 "
    bat_discharging_72="󰂀 "
    bat_discharging_81="󰂁 "
    bat_discharging_90="󰂂 "
    bat_discharging_95="󰁹 "
    bat_charging_14="󰂆 "
    bat_charging_28="󰂇 "
    bat_charging_42="󰂈 "
    bat_charging_56="󰂉 "
    bat_charging_70="󰂊 "
    bat_charging_84="󰂋 "
    bat_charging_95="󰂅 "
    charging=" "

    if test -f "/sys/class/power_supply/BAT0/uevent"; then
        status="$(cat /sys/class/power_supply/BAT0/status)"
        capacity="$(cat /sys/class/power_supply/BAT0/capacity)"

        symbol=""

        if [ $status = "Discharging" ]; then
            if [ $capacity -lt 10 ]; then
                symbol=$bat_discharging_9
            elif [ $capacity -lt 19 ]; then
                symbol=$bat_discharging_18
            elif [ $capacity -lt 28 ]; then
                symbol=$bat_discharging_27
            elif [ $capacity -lt 37 ]; then
                symbol=$bat_discharging_36
            elif [ $capacity -lt 46 ]; then
                symbol=$bat_discharging_45
            elif [ $capacity -lt 55 ]; then
                symbol=$bat_discharging_54
            elif [ $capacity -lt 64 ]; then
                symbol=$bat_discharging_63
            elif [ $capacity -lt 73 ]; then
                symbol=$bat_discharging_72
            elif [ $capacity -lt 82 ]; then
                symbol=$bat_discharging_81
            elif [ $capacity -lt 91 ]; then
                symbol=$bat_discharging_90
            else
                symbol=$bat_discharging_95
            fi
        else
            if [ $capacity -lt 15 ]; then
                symbol=$bat_charging_14
            elif [ $capacity -lt 29 ]; then
                symbol=$bat_charging_28
            elif [ $capacity -lt 43 ]; then
                symbol=$bat_charging_42
            elif [ $capacity -lt 57 ]; then
                symbol=$bat_charging_56
            elif [ $capacity -lt 71 ]; then
                symbol=$bat_charging_70
            elif [ $capacity -lt 85 ]; then
                symbol=$bat_charging_84
            else
                symbol=$bat_charging_95
            fi
            symbol="${symbol}${charging} "
        fi
        battery="${symbol}${capacity}%"
    fi
}

update_bt () {

    mouse="󰍽"
    no_mouse="󰍾"
    gamepad="󰖺"
    no_gamepad="󰖻"

    mac="ec:83:50:8a:52:70" # my gamepad mac

    no_bt="^c#0082fc^󰂲^d^"
    bt="^c#0082fc^^d^"

    if test -f "/sys/class/power_supply/hid-$mac-battery/status"; then
        bat_status="$(cat /sys/class/power_supply/hid-$mac-battery/status)"
        bat_capacity="$(cat /sys/class/power_supply/hid-$mac-battery/capacity)"

        full="󰥈 "
        high="󰥄 "
        med="󰥂 "
        low="󰥀 "
        min="󰤾 "

        icon="$gamepad"

        if [ $bat_capacity -gt 80 ]; then
            icon=$full
        elif [ $bat_capacity -gt 60 ]; then
            icon=$high
        elif [ $bat_capacity -gt 40 ]; then
            icon=$med
        elif [ $bat_capacity -gt 20 ]; then
            icon=$low
        else
            icon=$min
        fi

        bat="$bt ^c#0082fc^$gamepad $icon^d^ $bat_capacity%"
    else
        icon=$no_bt
        bat="$icon"
    fi
}

update_vol () { 
    vol="$([ "$(pamixer --get-mute)" = "false" ] && printf '  ' || printf '^c#ff0000^ ^d^ ')$(pamixer --get-volume)%"
}

update_backlight () {
    read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
    read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
    backlight="^c#ffff00^ ^d^ $((actual_brightness*100/max_brightness))%"
}

update_mic () {
    sources=$(pactl list sources| tr -d ' ' | grep -E '(api.alsa.pcm.stream|Volume:front)')
    unmuted_count=$(pactl list sources | grep -c 'Mute: no')
    mic_vol=""

    if [ ${#sources[*]} -eq 1 ]; then
        count=1
        for src in "${sources[@]}"
        do
            if [[ $src =~ "capture" ]]; then
                src=${sources[0]}
                mic_vol=$(echo $src | awk -F/ '{print $2}')
                break
            fi
            let "count+=1"
        done
    fi

    if [ $unmuted_count = 2 ]; then
        mic=" $mic_vol"
    else
        mic="^c#ff0000^ ^d^$mic_vol"
    fi
}

check_updates () {
    if [ -x "$(command -v checkupdates)" ]; then
        num_updates=$(checkupdates | wc -l) # arch
    elif [ -x "$(command -v apt)" ]; then
        num_updates=$(apt-get -s dist-upgrade | awk '/^Inst/ { print $2 }' | wc -l) # debian
    else
        num_updates=-1
    fi

    if [ $num_updates -eq 0 ]; then
        updates="^c#00ff00^ ^d^ up to date"
    elif [ $num_updates -eq -1 ]; then
        updates="^c#ff0000^can't fetch updates^d^"
    elif [ $num_updates -eq 1 ]; then
        updates="^c#d871a6^ ^d^ $num_updates update"
    else
        updates="^c#d871a6^ ^d^ $num_updates updates"
    fi
}

root_space=0

update_diskspace() {
    free_diskspace / root 
}

free_diskspace () {
    space=$(df -h | grep -E "($1)$" | awk -v icon=$3 '
        /\/.*/ {
        print $4
        exit 0
    }')

    freespace_percent=$(df -h | grep -E "($1)$" | awk '{ gsub("%","",$5); print 100-$5}')
    used_percent=$(df -h | grep -E "($1)$" | awk '{ print $5}')

    if [ $freespace_percent -gt 75 ]; then
        colorstate="^c#00ff00^"
    elif [ $freespace_percent -gt 50 ]; then
        colorstate="^c#fffa00^"
    elif [ $freespace_percent -gt 25 ]; then
        colorstate="^c#ffa500^"
    else
        colorstate="^c#ff0000^"
    fi

    if [ $2 = "root" ]; then
        root_space="$3  $colorstate$space($used_percent)^d^"
    fi
}


# initial values
check_updates
update_bat
update_diskspace
update_mic
update_time
update_vol

display () {
    xsetroot -name " $root_space | $updates | $cpu_load | $memory | $wifi_signal | $battery | $backlight | $vol | $mic | $time "
}

# SIGNALLING
# trap  "<function>;display"        "RTMIN+n"
##trap    "update_mic;display"        "RTMIN+1"

#trap    "update_vol;display"        "RTMIN+1"
#trap    "check_updates;display"     "RTMIN+1"
#trap    "update_diskspace;display"  "RTMIN+1"

##trap   "update_backlight;display"  "RTMIN+1"
##trap    "update_bt;display"        "RTMIN+1"
# where m = 34 + n

while true
do
    sleep 1 & wait && {
        [ $((sec % 1)) -eq 0 ] && display
        [ $((sec % 1)) -eq 0 ] && update_time
        [ $((sec % 2)) -eq 0 ] && update_backlight
        [ $((sec % 2)) -eq 0 ] && update_cpu_load
        [ $((sec % 2)) -eq 0 ] && update_vol
        [ $((sec % 2)) -eq 0 ] && update_mic
        [ $((sec % 5)) -eq 0 ] && update_bat
        [ $((sec % 15)) -eq 0 ] && update_memory
        [ $((sec % 15)) -eq 0 ] && update_wifi
        [ $((sec % 30)) -eq 0 ] && update_diskspace
        [ $((sec % 900)) -eq 2 ] && check_updates

        sec=$((sec + 1))
    }
done
